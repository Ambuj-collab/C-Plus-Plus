We saw how we can overload operators using class member methods. In this video, we'll learn how to overload operators using non-member or global functions. Since these are not member methods, we no longer have a 'this' pointer referring to the object on the left-hand side. So, since we very often need access to private attributes of the objects, you see these non-member functions declared as friend functions of the class in many applications. This isn't absolutely necessary since we can still use getter methods to access attribute values. But as I said, you often see them implemented as friends. I'm going to declare these overloaded operator global functions as friends of the class.
	ReturnType operatorOp(Type &obj);	// Syntax
	
	Number operator-(const Number &obj);
	Number operator++(Number &obj);		// pre-increment
	Number operator++(Number &obj, int);	// post-increment
	bool operator!(const Number &obj);
	
	Number n1 {100};
	Number n2 = -n1;	// operator-(n1)
	n2 = ++n1;			// operator++(n1)
	n2 = n1++;			// operator++(n1,int)

So, in the case of unary operators, a single object is in the parameter list and in the case of a binary operator, two objects are in the parameter list of the overloaded operator global functions. So let's overload the unary minus operator to make a string lowercase as we did in the previous video. We want to provide the same functionality we did before, and our use of the unary minus operator would look the same, as shown below.
	Mystring larry1{"LARRY"};
	Mystring larry2;
	
	larry1.display();	// LARRY

	larry2 = -larry1;	// operator-(larry1)

	larry1.display();	// LARRY
	larry2.display();	// larry

Let's see how we can do this using a non-member function. In the below code snippet, I'm assuming that this function has been declared as a friend to the Mystring class since I'm directly accessing the private attribute 'str'.
	Mystring operator-(const Mystring &obj) {
		char *buff = new char[std::strlen(obj.str) + 1];
		std::strcpy(buff, obj.str);
		for (size_t i=0; i<std::strlen(buff); i++)
			buff[i] = std::tolower(buff[i]);
		Mystring temp {buff};
		delete [] buff;
		return temp;
	}

First notice that this is not a member method, it's a regular c++ global function. The function returns a Mystring object by value, and it's named 'operator-', and it expects a single parameter. In this case, obj is a reference to a Mystring object. Now the code is essentially the same as it was in the member method version, except that the string data is in 'obj.str' rather than in 'this->str'. We allocate storage on the heap, copy the obj's string data, loop through and make the copied string all lowercase. Then we create a new Mystring object using the lowercase string as the initializer, de-allocate the allocated storage and return the newly created object by value. Ofcourse, you can't have both the member and non-member versions of this overloaded operator at the same time because the compiler wouldn't know which one to use. You can only have one or the other.
	ReturnType operatorOp(const Type &lhs, const Type &rhs);	// Syntax

	Number operator+(const Number &lhs, const Number &rhs);
	Number operator-(const Number &lhs, const Number &rhs);
	bool operator==(const Number &lhs, const Number &rhs);
	bool operator<(const Number &lhs, const Number &rhs);

	Number n1 {100}, n2 {200};
	Number n3 = n1 + n2;	// operator+(n1,n2)
	n3 = n1 - n2;			// operator-(n1,n2)
	if (n1 == n2) ...			// operator==(n1,n2)

You probably already figured out that overloading binary operators as global functions is basically the same, except that now we have two arguments required by the function, as shown above. The first argument is the left-hand side object and the second is the right-hand side object. Above you can see some example prototypes for some operators. Notice that they all have two parameters in the parameter list. I've named the first as 'lhs' for left-hand side and the second as 'rhs' for right-hand side. Then you can see how these overloaded operators can be used and the functions that c++ will call when it uses them.
	bool operator==(const Mystring &lhs, const Mystring &rhs) {
		if (std::strcmp(lhs.str, rhs.str) == 0)
			return true;
		else
			return false;
	}

Let's see how we can overload the equality operator as a non-member function. Again, I'm accessing a private attribute 'str' of the Mystring class. So I'm assuming this function is a friend of the Mystring class. The code is almost the same as it was for the member version except that now I have an LHS object instead of the this pointer. So we compare the left-hand side string to the right-hand side string using string compare as we did before. It's as simple as that.
	Mystring larry{"Larry"};
	Mystring moe{"Moe"};
	Mystring stooges{" is one of the three stooges"};

	Mystring result = larry + stooges;	 // operator+(larry, stooges) ;

	result = moe + " is also a stooge";		// operator+(moe, "is also a stooge");

	result = "Moe" + stooges;	// operator+("Moe", stooges) --> OK with non-member functions

Finally, let's overload the binary plus operator so that we can use it to concatenate two Mystring objects. We create 'larry', 'moe' and 'stooges' as Mystring objects, as we did previously. Now when we use the plus(i.e., +) operator, notice the functions that the C++ compiler is calling in the comments. Also notice that each is called with two arguments as we expect. Finally, remember that, with the member method version, the left-side operand of the plus operator had to be an object of the class type. With non-member functions, this isn't the case. Either one or both arguments can be of Mystring type. However, if you have two string literals and trying to concatenate them, that won't work. C++ assumes primitive pointer and not Mystring objects.
	Mystring operator+(const Mystring &lhs, const Mystring &rhs) {
		size_t buff_size = std::strlen(1hs.str) + std::strlen(rhs.str) + 1;
		char *buff = new char[buff_size];
		std::strcpy(buff, lhs.str) ;
		std::strcat(buff, rhs.str);
		Mystring temp {buff};
		delete [] buff;

		return temp;
	}

So let's implement concatenation(i.e., overloading + operator) as a non-member function. Above you can see that the function operator= returns a Mystring object by value. It also expects two Mystring objects, left-hand side(i.e., lhs) and right-hand side(i.e., rhs). Notice that they're both constant references since we don't want to modify them. The code now is exactly as it was for the member method version, except that whenever I need the left-hand side object, I use 'lhs' instead of the 'this' pointer. That's it. Again, both the member and non-member versions achieve the desired result. But remember, you can only use one at a time.
	class Mystring {
		friend bool operator==(const Mystring &lhs, const Mystring &rhs);
		friend Mystring operator-(const Mystring &obj);
		friend Mystring operator+(const Mystring &lhs, const Mystring &rhs);
	private:
		char *str;      // pointer to a char[] that hold a C-style string
	public:
		Mystring();
		Mystring(const char *s);
		Mystring(const Mystring &source);
		Mystring( Mystring &&source);
		~Mystring();
		
		Mystring &operator=(const Mystring &rhs);
		Mystring &operator=(Mystring &&rhs);
	   
		void display() const;

		int get_length() const;
		const char *get_str() const;
	};

Let's look at the Mystring class declaration above. First thing we're going to do is we're going to make them(i.e., non-member function or global c++ function that overload operator) friends. We don't have to make them friends. But it's going to be a lot easier to write the code because they don't have to call those getters all the time. So we can do that right in the class. Remember, the class has to grant friendship, as shown above. It doesn't really matter where you put these 'friend' declarations in, doesn't matter if you put them in the private area, the public area. It doesn't matter.
