The last operators we'll overload in this section are the stream insertion(i.e., <<) and extraction operators(i.e., >>). This will allow us to insert and extract our Mystring objects to and from streams exactly as we've been doing with all the other built-in types. 
	Mystring larry {"Larry"} ;
	cout << larry << endl;		// Larry
	Player hero {"Hero", 100, 33};
	cout << hero << endl;		// {name: Hero, health: 100, xp:33}

You can see above what the code would look like if we could simply insert our own user-defined objects into an output stream. This makes our classes feel and behave more like a built-in c++ type. And you can see that these printing of objects look nice. Now we don't have all those 'larry.display()' or 'hero.display()' methods that we had before.
	Mystring larry;
	cin >> larry;
	Player hero;
	cin >> hero;
	
We can also overload the stream extraction operator so that we can read data from a stream and assign them to our own objects. Above you can see that we're reading data into 'larry' and 'hero' objects. In the examples shown above, we're using 'cout' and 'cin' but we can use other streams as well. Also, we can redirect cin and cout to files and so forth. 
	Mystring larry;
	larry << cout; // huh?
	Player hero;
	hero >> cin; // huh?

Before we start, let's see why it really doesn't make sense to implement the overloading of insertion and extraction operators as member methods. Remember, when we overload an operator as a member method, the left-hand side operand must be an object of the class to which we're overloading. This means that we would have to write 'larry' on the left-hand side of the output statement, as shown above. While this will work, it would be very strange for c++ programmers to use in this manner since it's not the way we use these operators with other built-in values. The same is true for the extraction operator as well. So we're going to overload these operators as non-member functions. 
	std::ostream &operator<<(std::ostream &os, const Mystring &obj) {
		os << obj.str;		// if friend function
		// os << obj.get_str();		// if not friend function
		return os;
	}
	
Let's overload the stream insertion operator first, as shown above. You can see that this is a non-member function named 'operator<<' that has two arguments. The first argument is an output stream object(i.e., std::ostream) by reference. This is typed as std::ostream. The second parameter is a reference to the Mystring object whose data we want to insert in the output stream. Notice that the reference to Mystring object is constant. Also notice that the function returns an output stream reference(i.e., std::ostream &). This is important because we want to be able to chain insertions as we normally do. It's important that we use reference of std::ostream class, and we don't copy the object of std::ostream class. Then comes the easy part, put whatever data you like, in whatever format you like, on the output stream as usual. If this function has been declared as a 'friend' in the Mystream class, then you have access to all the private data members. Otherwise, you have to use the public getters to get the information you need. And finally, the last step is to return the reference of the passed output stream(i.e., std::ostream &os) so that we can do chaining of insertion, for example, cout << "Hello " << larry << ", How are you?";. As you can see, it's very simple and very useful too.
	std::istream &operator>>(std::istream &is, Mystring &obj) {
		char *buff = new char[1000];
		is >> buff;
		obj = Mystring{buff}; // If you have copy or move assignment
		delete [] buff;
		return is;
	}

Now let's see how we can overload the stream extraction operator. Let's start by looking at the function signature. The name of the function is 'operator>>'. The function has two parameters. The first is a reference to an input stream whose type is std::istream. And the second is a reference to the object we want to extract data into. Notice that since we're going to modify this object(i.e., obj), we don't want it to be a const. So depending on the data we want to read, we can get the data from the input stream and either store it locally or store it directly in the object. In this case, we allocate a large array of characters that will hold the string data, using which we want to construct a Mystring object. Then we simply create a temporary Mystring local object and assign it back to the object that was passed in. This assumes that we have an overloaded copy or move assignment operator, and they're implemented correctly since we have a raw pointer. Finally, we return the reference of std::istream so that we can do chaining of extraction, for example, cin >> larry >> moe;. We can do all sorts of error checking and setting/getting the state of the input stream, so that we have the control of the data we're extracting, as well as, not over-running the size of the buffer(i.e., 'buff' pointer inside operator>> function) we created. Notice that 'obj' is not const because I do want to modify that object based on what I'm reading in from the input stream. Also, So we are creating a pretty big size buffer array here(i.e., buff) and we are doing this dynamically on the heap. We could certainly do this in different ways so that we don't over-sized this buffer array.

We've overloaded the insertion and the extraction operators to work with our classes, and it really feels like it's part of the type system now.
