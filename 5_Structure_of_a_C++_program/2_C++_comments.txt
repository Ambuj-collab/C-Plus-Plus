One thing that's very important to understand is that the comments never make it to the compiler. In c++, the preprocessor strips out the comments so that the compiler never sees them. It may sound kind of weird as we're writing something that the compiler is never going to see. That's the whole point. This is human readable. This is for the next programmer that's coming down the pipe or for yourself when you have to go back and modify code. You can leave comments in the code explaining what you did and why you did. C++ has two styles of comments. The first one is single line comment and second one is multi line comment.

The idea behind programming is literate programming. Basically, your code should be self-documenting. Does that mean we don't write comments? Well, no. So, you want to be sure that what you write makes sense. In this case, here's my code(extract Section-5-Structure-of-a-C-Program-Source-code.zip and see main.cpp of Comments folder). Here's my main function and that's the block of code that I've written. This is pretty self-explanatory. There's an integer variable called favorite number. You're outputting to the console  -->  enter a number, you're reading from the console and you're printing out some stuff. This code doesn't need any commenting. It's very, very clear what it's doing. That's not always the case. Sometimes code is very complicated. It's using some complex algorithms. Maybe you're using some really clever efficiency tweak to make it run faster, but it makes it less obvious what it's doing. Those are good examples of where you should use comments. Don't comment for obvious things. If you're adding a and b, you don't want to put a comment that says, you know, adding a and b, it's pretty obvious from a + b what you're doing.
 
So you really want to explain more complicated code.

One of the dangers with comments is that many times programmers use comments as version control. So up here(in the multi line comment of main.cpp), you'll see something like below. That's not a good idea. If you want to use versioning use version control. Use something like subversion or git, don't write your versioning here.

	/*****************************************************
	* 
	*  Author: Ambuj Shukla
	*  11/11/2017 - Ambuj fixed bug in ......
	*  11/13/2018 - Joe added function to do .....
	*
	*****************************************************/
	
Finally, if you go back and modify code, make sure you look at the comments and modify the comments if necessary.
