Now, we'll learn about c++ vectors. Suppose we want to store test scores for students in a class but registration hasn't started yet, so I don't know how many students I'll have in class. Also students drop and add as the semester progresses. How can I model this information using an array as we've seen to this point? Remember, c++ arrays are fixed in size and I need to specify a size when I declare them. So what are my options? Well, I can always set the fixed size of the array to a size large enough, so that it's unlikely I'll have more than that number of students. Many times this option is okay, but you'll probably make it too big and waste space. For example, we may have 30 students in the class but we allocated 50 students in the array. Not only I have wasted storage space but now I need to keep track of how many students are actually in the array. And of course sooner or later, you'll get that one student that exceeds the size of the array. So what do we do? Well, we can use a dynamic array, such as a vector to solve some of these problems. A c++ vector is part of the c++ standard template library(STL). This is a library of powerful containers, algorithms, functions and iterators. This means that we have available to us pre-written, pre-tested, easy to use components that we can use to help us solve our problems. We'll go over the main components of the standard template library(STL) towards the end of this course. We've talked about c++ being an object-oriented language. Well, when we create a c++ vector, we are creating a c++ object. So, we can ask the object to perform operations for us.

Vectors can grow and shrink in size at runtime, so it's a perfect choice to model my students. Vectors also provide syntax and semantics similar to arrays. So, now that, we've learned about arrays, understanding vectors will be pretty easy. In addition to the array-like syntax, we can also use lots of really powerful functions like sort, reverse, erase, find and more. Vectors also give us the ability to use methods that provide bounds checking if we wish.

There are several ways to declare a vector. The syntax of declaring a vector is slightly different from that of declaring an array because vectors are objects. If you use the subscript operator, that's the square brackets(i.e., []) to access vector elements, then vectors will provide no bounds checking. This provides the same behavior as arrays. It's important to understand when we use the subscript operator with a vector, no bounds checking will be done. You have to do it by yourself as with arrays.

Unlike arrays, when you declare a vector, the vector elements will automatically be initialized to 0 unless you specify otherwise. So if you declare a vector of 10 integers, these integers will be initialized to 0. They won't contain garbage.
