The c++ character data type is used to represent characters such as the letter 'A', 'X' and so forth. The character data type is often implemented as eight bits, which means it can represent a maximum of 256 characters. This is plenty to represent the alphabets for many spoken languages. However, some spoken languages have thousands of characters. And in many cases, multiple symbols are combined to form single characters. In order to support these languages, c++ supports a wider character type that can be as large as necessary to represent these characters.

Unicode is a common standard used to represent multiple character sets for any language.

C++ also supports floating point types. These are used to represent non-integer numbers, such as real numbers, numbers like 1.2, 0.5 and pi. It's important to understand that computers have finite storage and many real numbers have an infinite number of digits after the decimal point. Pi is a perfect example of this. In these cases, computers store an approximation of the real number. There's no way the computer can store numbers, such as pi, precisely. Floating point numbers are represented internally by the computer as signed numbers with a mantissa and an exponent. You may remember your scientific notation from school, 1.234768767879 times 10 to the power 7. That's the way they're stored internally. This isn't something you need to worry about since it's handled automatically internally. But it's important to know that these are approximations. There are three types of floating point numbers: float, double and long double. Each has varying precision and size depending on the compiler and your platform(i.e., machine). Note that 'long double' can store very, very small and very, very large floating point numbers.
