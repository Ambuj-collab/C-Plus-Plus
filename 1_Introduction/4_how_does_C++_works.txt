The code we write is called source code. Source code is generally higher level than computer code since it needs to be understandable by humans, and humans aren't very good at reading long streams of zeros and ones.

Just as humans aren't very good at reading computer code, computers aren't very good at reading source code. We need to translate the source code to a form that's understandable by the computer. This form is called object code, and the compiler is the translator. The c++ compiler is a program that takes as input, which is C++ source code, and produces object code as output. If the source code has errors, then no object code is produced.

Since our code might depend on code that other programmers wrote, this is actually a very likely scenario because we want to reuse as much existing code that's out there as possible. This makes it easier for us to solve our problems. So a program called the linker, takes our object code and the object code that exists out there in the form of libraries and links it all together to form an executable program(.exe file). That is a program that we can now run that follows the instructions we told the computer to do using C++.
	Compiler: translates from high-level to low-level
	Linker: links togetherour code with other libraries and creates executable program
	
Let's go over this build process one more time in a visual manner(look 5_C++_build_process.png). First, we use an editor to enter our C++ code or to edit existing C++ code. Note that we can have many C++ source files. In this course, we'll be using a single main.cpp file until our programs get larger. If your program gets larger then we'll need several C++ source files to better organize our program. Production C++ programs can have hundreds, even thousands of source files and millions of lines of code. Then we need to compile the C++ code using a C++ compiler. If the code contains no syntax errors, then the compiler will generate an object code file for each C++ source file. On windows, the object files have .obj extensions, and on UNIX and mac they will have .o extensions. Finally, the object files and any libraries that our program requires must be linked together. This final step creates an executable file that can run. On windows, the file extension will be .exe and on UNIX and mac, they typically don't have any extensions.
