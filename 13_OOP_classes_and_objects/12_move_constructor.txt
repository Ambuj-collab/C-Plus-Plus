We'll learn about c++'s move constructor and move semantics. These features were introduced in c++11, and they can be difficult to understand. So we'll take it slow and one step at a time. While move semantics is not considered a beginning c++ topic, it's important to understand it conceptually, so you can identify it in code when you see it. One of c++11's most pervasive features was probably move semantics. And to really understand move semantics, it's important to be able to tell whether an expression is an l-value or an r-value. If you need a refresher about L-values and R-values, please refer to the L-values and R-values video in section 12 of this course. But a useful rule of thumb is that when you can refer to an object by name or you can follow a pointer to get to an object, then that object is addressable and it's an L-value, and R-values are everything else. But in the context of move semantics, r-values refer to temporary objects that are created by the compiler and objects returned from methods. As you can see below, when the expression 100 + 200 is evaluated, the compiler stores 300 in an unnamed temporary value. This value is not addressable so it's an R-value. The R-value is then assigned to the L-value i.e., 'total' variable.
	int total {0};
	total = 100 + 200;

The same happens with objects. However, with objects, there can be a great amount of overhead if copy constructors are called over and over and over again, making copies of these temporary objects. And when we have raw pointers and we have to do deep copies, then the overhead is even greater. This is where move semantics and the move constructor comes into the picture. R-value objects are the objects that move semantics addresses. We know that copy constructors are called whenever the compiler needs to make a copy of an object. We also know that if our class contains a raw pointer, then we must implement deep copy. However, this can be computationally expensive since we have to allocate space for the copy and then copy the data over. The c++ move constructor moves the object rather than copies it, this can be extremely efficient. Move constructors are optional. If you don't provide them, then the copy constructors will be called. But it's a good idea to use move constructors for efficiency. Finally, when you run your code and step through it in the debugger, you might not see move constructors being called. In fact, sometimes you may not even see the copy constructors being called. If you experience this, it's probably due to something called copy elision. Copy elision is a compiler optimization technique that eliminates unnecessary copying. Compilers are really smart with their optimizations now. And one of the common techniques is called Return Value Optimization(RVO), that's when the compiler generates code that doesn't create a copy of a return value from a function, making the code much more efficient.

So let's start by talking about r-value references. We've already seen l-value references which are references to l-values. Well, r-value references are references to r-values. In the context of move semantics, think of r-value references as references to those temporary objects that we were talking about. l-value references are declared using a single ampersand(i.e., &) like we've done, but r-value references are declared using two ampersands(i.e., &&).
	int x {100}
	int &l_ref = x; // l-value reference
	l_ref = 10; // change x to 10
	
	int &&r_ref = 200; // r-value ref
	r_ref = 300; // change r_ref to 300
	
	int &&x_ref = x; // Compiler error

Let's see some examples. In this example, we'll see the difference between an l-values reference and an r-value reference. First, we declare x as an integer and initialize it to a 100. In this case, x is an l-value, it's addressable, and it's got a name. Now we can create l_ref as a reference to x. And since x is an l-value, this is an l-values reference. We can use l_ref to refer to x. Nothing new, this is stuff that we've seen already. But now let's see what an r-value reference looks like. r_ref is declared as an r-value reference to an integer with a double ampersand operator, and we set it to refer to 200. Since 200 is an r-value, this makes r_ref an r-value reference. Now we can actually assign 300 to r_ref, which stores 300 into the r-value of where r_ref refers to. In other words, we just changed that temporary variable. Notice that if we try to assign an L-value to an R-value reference, we get a compiler error, which makes perfect sense.
	int x {100}; // x is an l-value
	void func(int &num); // A
	
	func(x); // calls A – x is an l-value
	func(200); // Error – 200 is an r-value

So now let's look at l-value references in the context of function parameters. This is what we've been doing all along up to this point in the course. We have an integer x, we initialize it to 100, x is an l-value. Now look at the function func(). It expects an l-value reference, as denoted by the single ampersand. So it wants an l-value. If we call func() and pass in x, then this is okay since x is an l-value and num will be the reference to an l-value. But what happens if we call func() with 200. Well, 200 is not an l-value, it's an r-value, and the compiler will generate an error. You can see the error message below(in the pdf) that the compiler generates.
	int x {100}; // x is an l-value
	void func(int &&num); // B
	func(200); // calls B – 200 is an r-value
	func(x); // ERROR - x is an l-value

Now let's look at r-value references in the context of function parameters. We, again, have defined x to be an integer and initialized it to 100. This time we declare func(), as a function, that expects an r-value reference, and we denote that with the double ampersands. So it wants an r-value. If we call func() and pass in 200, this is okay since 200 is an r-value. And now num will be a reference to an r-value. But what happens if we call func() with x? Well, we get an error message because x is not an r-value, it's an l-value. So the compiler generates the error, and you can see the message it generates below(in the pdf).
	int x {100}; // x is an l-value
	void func(int &num); // A
	void func(int &&num); // B
	
	func(x); // calls A – x is an l-value
	func(200); // calls B - 200 is an r-value

Now we can overload these functions and have both of them in our code at the same time since they have unique signatures. And the compiler will call the correct function depending on whether the parameter is an l-value or an r-value. We're going to take advantage of this when we define the move constructor.
	class Move {
	private:
		int *data; // raw pointer
	public:
		void set_data_value(int d) { *data = d; }
		int get_data_value() { return *data; }
		Move(int d); // Constructor
		Move(const Move &source); // Copy Constructor
		~Move(); // Destructor
	};

So now let's see how this works with a move constructor in a class. Here, I've created a class named Move and it has a raw pointer as a data member. This class is similar to the Shallow and Deep classes we used earlier in this section. The rest of the class methods are pretty standard, and we've seen them before. Notice that we've included a copy constructor that does a deep copy. We have not defined the move constructor yet, we'll do that soon. But first, let's look at the copy constructor. Below is the code for the copy constructor, again, pretty standard deep copy.
	Move::Move(const Move &source) {
		data = new int;
		*data = *source.data;
	}

We allocate storage, and then we copy the data.
	Vector<Move> vec;
	vec.push_back(Move{10});
	vec.push_back(Move{20});

Now we run a simple main() that creates a vector of some Move objects, and we call/name the vector 'vec', and we push_back() the Move object. Now notice what's happening in the argument list. Move{10} and Move{20} are creating temporary objects, they're unnamed. So they're going to be r-values. What happens is that the compiler is going to use the copy constructor to make copies of these guys(i.e., temporary objects). So below is the sample output from that program. You can see these constructors, destructors and copy constructors being called over and over again. In fact, you can see that the copy constructor is doing several deep copies, which can be inefficient.
	Output:
	===========
		Constructor for: 10
		Constructor for: 10
		Copy constructor - deep copy for: 10
		Destructor freeing data for: 10
		Constructor for: 20
		Constructor for: 20
		Copy constructor - deep copy for: 20
		Constructor for: 10
		Copy constructor - deep copy for: 10
		Destructor freeing data for: 10
		Destructor freeing data for: 20
Note: I can't understand why we use deep copy again for 10 when we are pushing back 20 to the 'vec'. We have already copied and pushed it back to the 'vec', so why should we repeat it again?
Ans) If the vector needs to expand in size, a new area of memory is allocated for the largest vector and elements are copied to the new area. That's why we see more copies than we would expect. Also if you use the reserve() method of vector class, you can pre-allocate a certain size before adding new elements, so you can avoid copying all elements each time the vector needs to resize. I already knew of the reserve() method but only now I understand its usefulness. 

But what's going on is that the vector is actually growing behind the scenes. And when the vector grows, those already inserted objects, in the vector, need to be copied to the new storage. Remember, the vector is using contiguous storage. So you can see that a lot of times, there's a lot of copying going on behind the scenes that we're not aware of.

Note: During the move constructor example, when we push back a new value, the move constructor works for the value we pushed back which is OK. But also it works again for the values that were previously in the vector elements. Is that because the order of elements in the vector is rearranged every time we push back a new value? This does not make sense because the first element of the vector should have the index zero and when we push back a new value into vector, it should  get the next index. Right? So why does move constructor moves existing values again? Is it the way vector class has been defined...I understand the process but not sure why..looks kinda inefficient but I am sure I am missing something.
Ans) The vector is expanding and the elements already in the vector are being moved before the next element is added.
Try using:
	vec.reserve(100);
Right after you initialize the vector and run it again. You should see a difference.
Follow-up question: As you said, I used vec.reserve(100); and there were way less move constructors...thank you. so I believe vec.reserve() allocate space for the vector, so the indexing was ready. I guess that is similar to assign a size when we initialize a vector like 'vector<Move> vec(100);'. Is it? How it is done on actual projects (allocate space before data is entered) or is it better to let vector dynamically allocate the memory? or it all depends on the needs? Let us say we can allocate a certain amount of memory for data in our program and we can add additional space every time we run out of space. So the program runs faster when we do not have to rearrange every time a data is entered. Or am I overthinking , let just vector dynamically allocate the memory unless we use them for fixed sized matrix.
Ans) vec.reserve(100) pre-allocates a vector of size 100, so the vector isn't expanding until we reach that limit. Generally when we use a vector we don't know how many element we may put into it. So it's great that it can expand as needed without us worrying about it. If we do know something about how many elements we might need, then reserving an amount upfront will help performance. If we need to use a fixed size data structure, we can use an array or better still a std::array. We'll learn about the std::array later in the course.


Now let's add the move constructor to the class to make it much more efficient. So what does the move constructor actually do. Well, instead of making a deep copy as the copy constructor does, it simply moves the resource on the heap. And the way we do that is just to assign the pointer from the source object to the current object. You might be thinking, isn't that what default member-wise copy constructor is. And yes, it is. But now the difference is that we null out the pointer in the source object. So what we have now is an object who owns the data on the heap and then the original temporary object with a null pointer to that 'data' variable. This is real efficient since we're not doing a copy at all.
	Move::Move(Move &&source);

Before we implement the move constructor, let's look at its syntax, as shown above. As you can see it's very similar to the syntax for a copy constructor, but it's got two differences. First, there's no const qualifier for the parameter 'source'. There can't be because we need to modify it in order to null out its pointer. And second, the parameter is an r-value reference, and you can see that with the double ampersands. You can see above what the move constructor prototype might look like for a Move class.
	class Move {
	private:
		int *data; // raw pointer
	public:
		void set_data_value(int d) { *data = d; }
		int get_data_value() { return *data; }
		Move(int d); // Constructor
		Move(const Move &source); // Copy Constructor
		Move(Move &&source); // Move Constructor
		~Move(); // Destructor
	};

So here we're adding the move constructor prototype to the Move class declaration, and now we need to implement it.
	Move::Move(Move &&source)
		: data{source.data} {
		source.data = nullptr;
	}

Notice how simple the implementation is. We simply copy 'source.data' to 'data'. That's a simple copy of a pointer data member. Again, we're not copying what it's pointing to, we're not doing a deep copy. Then we null out 'source.data'. This step is really important. Otherwise, we end up with the equivalent of a shallow copy and not a move. That's it. Many resources that describe the move constructor say that it steals or pilfers the data and then it nulls out the source pointer, and that's really a good way to think about it, that's exactly what it's doing.


Now we've got our same program. And when we execute it, instead of the copy constructors being called for those temporary objects, the move constructors will be called because there are r-values. And it's going to be much more efficient than doing deep copies. So let's take a look at the output now.
	Output:
	=========
		Constructor for: 10
		Move constructor - moving resource: 10
		Destructor freeing data for nullptr
		Constructor for: 20
		Move constructor - moving resource: 20
		Move constructor - moving resource: 10
		Destructor freeing data for nullptr
		Destructor freeing data for nullptr
		Destructor freeing data for: 10
		Destructor freeing data for: 20

As you can see, there are no copy constructor calls at all and the move constructor is indeed being called. You can also see when the destructors are called for null pointer. That's destroying the object that we just moved and set its 'data' pointer to null. So there you go. That's a basic introduction to r-value references in the move constructor.  There is not one single copy constructor being called. So we're doing no deep copies, we're only moving resources using the move constructor.

When C++ create a temporary object by writing below:
	vector<Move> vec;
	vec.push_back(Move{10});

It does the following two actions:
1) The compiler first creates a temporary(r-value) object and this object is first constructed by the parameterized constructor we have defined in the Move class.

2) Then a copy of this temporary(r-value) object is constructed by the copy constructor we have defined in the Move class. This copied object is then pushed back into the vector 'vec'.

Note:
========
1) If we are creating a class object with an r-value then move constructor will be called if it is defined. If move constructor is not defined then copy constructor will be called.
2) If we are creating a class object with an l-value then copy constructor will be called.


Questions:
============
1) We are saying that the r_values are not addressable and unnamed temporary object or value. If it is non-addressable, then how can we create a r-value reference with 'int &&r_ref = 300' and also able to change their values by r_ref = 200 ? Does it mean even if it is unaddressable object or value but we can somehow reference it ?

Ans) When Frank says that r-values are not addressable, he doesn't mean they don't have an address. He just means that you can't get the address with the & operator. Writing &200 will throw an error.
However, you can extract the address from an r-value with an r-value reference:
	int &&value {200};
	cout << &value << endl; // prints the address of the r-value reference
This means that r-value references are actually l-values! They have a name and are addressable with the & operator, so you can store it in an l-value reference:
	int &ref {value}; // same variable as above
	cout << ref << endl; // prints 200

2) I was a bit confused where exactly our data is being moved to. So when we call the move constructor, we are copying the source's data and that is being moved into the vector? So our first element inside the vector now contains the data for the temporary object Move{10} ? Also, how does the destructor know to delete the source data that was nulled out rather than the data we used to copy source.data into? Thanks in advance. Having a bit of trouble grasping this topic.

Ans) When we add an object to the vector, we copy the object. Normally, we would use a Copy Constructor and if we have a raw pointer in our object, we would perform deep copy and make a copy of the pointed to data as well.

When we use move semantics, we use the move constructor. We still copy the object, but if it has a raw pointer then rather than doing a deep copy, we simply steal the pointer's value and copy that into the new object and then we null out the pointer in the object being 'moved'(i.e., source).  Since that object(i.e., source) is an r-value reference then it will be destroyed and it's destructor will be called. And since we already nulled out it's pointer, we won't deallocate the storage which was the goal.

3) r-value and l-value?
Ans) 
vector<Move> vec;
vec.push_back(Move{10});   //  Move{10} is an r-value

Move abc{10};
vec.push_back(abc);		// abc is an l-value
