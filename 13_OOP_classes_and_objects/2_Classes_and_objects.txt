Now, we'll learn a little bit more about classes and objects. You can think of classes as blueprints from which objects are created. Classes are user-defined types. And one of the goals in object-oriented programming is to make the user-defined types feel like they're part of the programming language. So when we create our classes, we want to be able to use them just like we use integers, doubles and so forth, easy and simple. Classes have attributes which are data. And they also have functions, which are called methods. As mentioned in the previous videos, classes can hide data and methods that are only used internally by the class. This is done using the private and public access modifiers. The goal of a class is to provide a well-defined public interface that the user of the class can easily use to solve their problem. Here are some example of class: Account, Employee, Image, std::vector and std::string. These are all classes that model real-world entities. std::vector and std::string are part of the c++ standard library. Account, Employee and Image might be classes that we would create in our applications. So now that we know what a class is, what's an object? Well, objects are created from classes and represent a specific instance of the class they're created from. So if I have an account class, I can create a Frank's account object that's a specific instance of an account that models Frank's account information. We can have as many objects as we need. If we were modeling a real banking application, we could have hundreds of thousands of account objects, each representing an individual instance of an account. Each object has its own identity, and each can use the methods defined in the class.
