We've seen how we can attempt to write generic functions using preprocessor macros. In this video, we will see how we can use c++ templates to accomplish writing generic functions. So what is a c++ template. A template is a generic blueprint that the compiler uses to generate specialized functions in classes. As I just said, c++ supports function and class templates. In this video, will learn about function templates, and we'll see class templates in the next video. The idea with templates is that we define a template with a placeholder type, and then we plug-in the actual type we want when we need it. Then the compiler generates the specific function or class that we need. Remember, all of this happens at compile time. If you're coming from other programming languages, you might be used to this happening at runtime, c++ does it at compile time. So we get the benefit of the compiler performing type checking for us before the program executes. C++ template supports the concept of generic programming or meta programming since we're providing a generic representation of a function or class and then the compiler writes the actual function or class for us. That's very, very powerful. However, with power comes complexity. C++ templates can be very very complex and while the concept is easy to understand, seeing them in practice can sometimes be very intimidating, even for experienced programmers. Also, the error messages provided by the compiler can be very difficult to understand. So, let's see how we can use function templates with the max function that we used in the previous video.


Let's quickly review. We want to write a max function that returns the maximum of 2 integers passed into it. We can use a simple conditional expression which, if you recall, is equivalent to an if-else statement. Now we can simply use the max function and passing integers and get back the max of those integers. Now suppose we need a max function for doubles and another one for characters. And we could have another one for floats and longs, you get the idea. We could end up writing many of these max functions. Just as we saw in the previous lecture, the code is the same for all of them. It's the code with the conditional operator. The only thing that changes are the types of the parameters.
	T max (T a, T b) {
		return (a > b) ? a : b;
	}

So now let's see how we can use templates to allow to write just one blueprint for this function. Why don't we simply replace the type with an identifier that represents any type. In this case, we'll use the uppercase T, but we can use any valid identifier we wish. So that's it. That was easy. That's what we want, right? Yes, indeed. But the compiler doesn't know what to do with this, and it's going to give us a compiler error. We need to explicitly tell the compiler that this is a template function. So let's do that below. 
	template <typename T>
	T max(T a, T b) {
		return (a > b) ? a : b;
	}

Notice that now we provide the compiler with the line 'template <typename T>'. That's the template parameter type. This tells the compiler that T is the typename that will be replaced with whatever the user needs. Now this will compile, but it will not generate any code. Let me say that again. This will not generate any code. It's simply a template or a blueprint. Code is not generated by the compiler until the user uses a specialized version of the template. I'll show you how to do that in a second.
	template <class T>
	T max(T a, T b) {
		return (a > b) ? a : b;
	}

But first, I want you to know that we can use the reserved words 'typename' or 'class' in templates. They are essentially equivalent. I will use 'typename' in this course, but you'll see both 'typename' and 'class' in production code, so please be aware of that.


So now, let's see how do we use this template function. Notice the code above. We declare 2 integers 'a' and 'b' and initialize them. Then we call max with 'a' and 'b' as parameters. But also notice the template parameter we're using. That's the 'int' in angular brackets. This gives the compiler all the information it needs to actually generate a specialized function from the template we created using 'int' in place of T. The syntax should look familiar. We used it previously when we created vectors and smart pointers. So, vectors, unique pointer(i.e., unique_ptr), shared pointers(i.e., shared_ptr) and so forth, are implemented as template classes.
	std::cout << max<double>(c, d);
	std::cout << max(c, d);

Now suppose we need a max function for doubles. Easy, we simply use max and pass into doubles, say 'c' and 'd' and use a template parameter double in the angle brackets. The compiler now knows that it needs to generate the double version of the max function. often the compiler can deduce the type of the template parameter, and we don't even need to provide it as in the second statement above. How cool is that? That makes it even easier.
	char a{'A'} ;
	char b{'Z'};

	std::cout << max(a, b) << std::endl;

And we don't have to stop with doubles. If we need to compare 2 characters and return the max character, we can simply use the template function max with chars and the compiler will generate the character version of the max function. We can use almost any type we need. Notice, I said almost. What do I mean by almost any type? Well, let's take a closer look at the function again, and you'll see what I mean. Notice that the code in the template function is using the greater than operator to compare 'a' and 'b'. This means that whatever type we use for T, must support this operator. For primitive types, like ints, chars, doubles, it's not a problem. But for our own class types, we have to be sure that our class overloads the greater than operator or else this won't compile.
	Player p1 {"Hero", 100, 20};
	Player p2 {"Enemy", 99, 3};

	std::cout << max<Player>(p1, p2);

In this example, we're assuming we have a Player class, and we're using max with Player objects. So the compiler will generate the max function that expects and compares 2 Player objects. Unless the Player class overloads the greater than operator, this code won't compile.
	template <typename T1, typename T2>
	void func(T1 a, T2 b) {
		std :: cout << a << "" << b;
	}

There is no limit to the number of template parameters you can have. And of course, they can be of different types. In this example, we're creating a function template for a function named 'func'. It expects 2 parameters. The first is of type T1 and the second is of type T2. Notice that we specified two template parameters in this case. So there's the function declaration. Now let's see how we would use it.
	func<int,double>(10, 20.2);
	func('A', 12.4);

We can call func and explicitly provide an integer and a double in this example or in the case of the call to func with no template parameters, the compiler will deduce the types from the function arguments. That's it. Now, of course, we can pass by value, by reference, by pointer with const modifiers and so forth. And all of the function parameters don't have to be generic. You can see all the possibilities and combinations.
