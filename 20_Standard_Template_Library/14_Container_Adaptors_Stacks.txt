We'll learn about our first STL adapter container, the stack. The stack is a last-in, first-out data structure. It's an adapter because it's implemented in terms of already existing STL containers. Since all operations on a stack happen on only one end, the top. We can easily implement a stack based on any container that has a back. These are vector, list, and deque. So, the way that the stack methods work is that they use delegation and they call the push_back(), pop_back() methods of the underlying container. Stacks have wide applications in computer science and the STL provides a simple concise implementation. You can think of a stack as a stack of books or a stack of plates. If we stack plates one on top of the other, we can't pull out a plate from the middle or from the bottom, instead we add plates at the top and remove them from the top. Since stacks are limited to insertions and deletions only one end. Iterators really don't make sense and they're not supported. So, we can't use stacks with STL algorithms.

In order to use the stack container, we have to include the <stack> header file. The stack provides a handful of methods that have well-defined behavior. The push() method inserts an element at the top of the stack. The pop() method removes an element from the top of the stack. The top() method accesses the top element of the stack but it doesn't remove it. Finally, we have the empty() and size() methods that we've already seen in the other STL containers.
	std::stack<int> s;		// deque
	std::stack<int, std::vector<int>> s1; 	// vector
	std::stack<int, std::list<int>> s2;		// list
	std::stack<int, std::deque<int>> s3;		// deque

Since the stack is an adapter class, we can choose what underlying container will be used when we create our stack objects. In the first example above, I'm providing no information about the underlying container, so the STL will use a deque by default. You can see in the next three examples above that I'm explicitly stating which underlying container to use in the template parameter.
